//      *********    DO NOT MODIFY THIS FILE     *********
//      This file is regenerated by a design tool. Making
//      changes to this file can cause errors.
namespace Expression.Blend.SampleData.RevisionHistoryViewModelSampleDataSource
{
	using System; 

// To significantly reduce the sample data footprint in your production application, you can set
// the DISABLE_SAMPLE_DATA conditional compilation constant and disable sample data at runtime.
#if DISABLE_SAMPLE_DATA
	internal class RevisionHistoryViewModelSampleDataSource { }
#else

	public class RevisionHistoryViewModelSampleDataSource : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		public RevisionHistoryViewModelSampleDataSource()
		{
			try
			{
				System.Uri resourceUri = new System.Uri("/SourceControlMonitor;component/SampleData/RevisionHistoryViewModelSampleDataSource/RevisionHistoryViewModelSampleDataSource.xaml", System.UriKind.Relative);
				if (System.Windows.Application.GetResourceStream(resourceUri) != null)
				{
					System.Windows.Application.LoadComponent(this, resourceUri);
				}
			}
			catch (System.Exception)
			{
			}
		}

		private CommitItems _CommitItems = new CommitItems();

		public CommitItems CommitItems
		{
			get
			{
				return this._CommitItems;
			}
		}
	}

	public class CommitItemsItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _HasLocalEditsOnAnyFile = false;

		public bool HasLocalEditsOnAnyFile
		{
			get
			{
				return this._HasLocalEditsOnAnyFile;
			}

			set
			{
				if (this._HasLocalEditsOnAnyFile != value)
				{
					this._HasLocalEditsOnAnyFile = value;
					this.OnPropertyChanged("HasLocalEditsOnAnyFile");
				}
			}
		}

		private double _Revision = 0;

		public double Revision
		{
			get
			{
				return this._Revision;
			}

			set
			{
				if (this._Revision != value)
				{
					this._Revision = value;
					this.OnPropertyChanged("Revision");
				}
			}
		}

		private string _Author = string.Empty;

		public string Author
		{
			get
			{
				return this._Author;
			}

			set
			{
				if (this._Author != value)
				{
					this._Author = value;
					this.OnPropertyChanged("Author");
				}
			}
		}

		private string _Date = string.Empty;

		public string Date
		{
			get
			{
				return this._Date;
			}

			set
			{
				if (this._Date != value)
				{
					this._Date = value;
					this.OnPropertyChanged("Date");
				}
			}
		}

		private string _LogMessage = string.Empty;

		public string LogMessage
		{
			get
			{
				return this._LogMessage;
			}

			set
			{
				if (this._LogMessage != value)
				{
					this._LogMessage = value;
					this.OnPropertyChanged("LogMessage");
				}
			}
		}

		private ItemChanges _ItemChanges = new ItemChanges();

		public ItemChanges ItemChanges
		{
			get
			{
				return this._ItemChanges;
			}
		}
	}

	public class CommitItems : System.Collections.ObjectModel.ObservableCollection<CommitItemsItem>
	{ 
	}

	public class ItemChangesItem : System.ComponentModel.INotifyPropertyChanged
	{
		public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

		protected virtual void OnPropertyChanged(string propertyName)
		{
			if (this.PropertyChanged != null)
			{
				this.PropertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
			}
		}

		private bool _HasLocalEdits = false;

		public bool HasLocalEdits
		{
			get
			{
				return this._HasLocalEdits;
			}

			set
			{
				if (this._HasLocalEdits != value)
				{
					this._HasLocalEdits = value;
					this.OnPropertyChanged("HasLocalEdits");
				}
			}
		}

		private string _ChangeType = string.Empty;

		public string ChangeType
		{
			get
			{
				return this._ChangeType;
			}

			set
			{
				if (this._ChangeType != value)
				{
					this._ChangeType = value;
					this.OnPropertyChanged("ChangeType");
				}
			}
		}

		private string _FilePath = string.Empty;

		public string FilePath
		{
			get
			{
				return this._FilePath;
			}

			set
			{
				if (this._FilePath != value)
				{
					this._FilePath = value;
					this.OnPropertyChanged("FilePath");
				}
			}
		}
	}

	public class ItemChanges : System.Collections.ObjectModel.ObservableCollection<ItemChangesItem>
	{ 
	}
#endif
}
